{"title":"GSNA ÊïôÁ®ã","markdown":{"yaml":{"title":"GSNA ÊïôÁ®ã","authors":[{"name":"JAYZ","affiliation":"The University OF Myself","roles":"writing","corresponding":true}],"bibliography":"references.bib"},"headingText":"üçîGSNA ÊïôÁ®ãü§ó","containsRefs":false,"markdown":"\n\n\n------------------------------------------------------------------------\n\n## ü§™Part 1 : The Core Concepts of GSEAü§†\n\n------------------------------------------------------------------------\n\n### Lesson 1: The Key Question - Moving Beyond Arbitrary Cutoffsü•∂\n\n**Goal:** To understand the limitations of standard \"cutoff-based\"(Âü∫‰∫éÊà™Ëá≥ÂÄº) enrichment analysis and to grasp the fundamentally different and more powerful question that GSEA asks.\n\n#### **The \"Classic\" Way: Over-Representation Analysis (ORA)**\n\nLet's first revisit the type of enrichment analysis we have already performed in our proteomics and metabolomics projects. This method is formally called **Over-Representation Analysis (ORA)**.\n\n-   **The ORA Workflow:**\n\n    1.  **Start with a universe:** You have a list of all genes/proteins/metabolites detected in your experiment (e.g., 20,000 genes).\n\n    2.  **Apply a strict cutoff:** You apply an arbitrary(‰ªªÊÑèÁöÑ) statistical threshold to create a short list of \"significant\" genes. For example, you select only the genes where the **adjusted p-value \\< 0.05 AND the \\|log2 Fold Change\\| \\> 1**. This might give you a list of 500 \"interesting\" genes.\n\n    3.  **Ask the ORA question:** You then use the `hypergeometric test` to ask: \"Is the 'Apoptosis(ÁªÜËÉûÂáã‰∫°)' pathway, which has 100 member genes in the universe, surprisingly over-represented in my short list of 500 genes?\"\n\n-   **The Visual Analogy:** Imagine all your genes are marbles in a giant urn. You pull out a handful of marbles that are \"significant\" (e.g., the red ones). ORA then asks, \"Did I get more 'Apoptosis' marbles in my hand than I would expect by random chance?\"\n\n#### **The Limitations and Problems of the ORA / Cutoff Method**\n\nThis method is simple and useful, but it has two major conceptual flaws:\n\n**1. The Arbitrary Cutoff:**\n\n-   The choice of a p-value cutoff (0.05) or a fold-change cutoff (1.0) is ***completely arbitrary***. ***Is a gene with an adjusted p-value of 0.051 truly biologically meaningless? Is a gene with a log2FC of 0.99 truly uninteresting?***\n\n-   **Information Loss:** By applying this strict cutoff, you are ***throwing away the vast majority of your data***. You are completely ignoring the thousands of genes that showed a weaker but still potentially important change. ***Biology is often about subtle, coordinated shifts, not just blockbuster hits.(ÁîüÁâ©Â≠¶ÈÄöÂ∏∏Ê∂âÂèäÂæÆÂ¶ôÔºåÂçèË∞ÉÁöÑÂèòÂåñÔºåËÄå‰∏çÊòØ‰ªÖ‰ªÖËΩ∞Âä®‰∏ÄÊó∂ÁöÑÂèòÂåñ)***\n\n**2. The Sensitivity Problem:**\n\n-   Imagine a biological pathway‚Äîlike a signaling cascade(‰ø°Âè∑ËÅîÁ∫ß)‚Äîwhere every single one of the 20 genes in the pathway is ***upregulated*** by a small but consistent amount (e.g., a log2FC of 0.5 for all of them).\n\n-   Because none of these genes passes the arbitrary \\|log2FC\\| \\> 1 threshold, **none of them will make it into your \"significant\" list.**\n\n-   As a result, ***the ORA method will be completely blind to this clear and important biological signal***. It will ***report that this pathway is not significant***, which is clearly false. The method is not sensitive to small but coordinated changes.\n\n#### **The GSEA Solution: A Fundamentally Different Question**\n\nGSEA was designed specifically to overcome these two problems. It does away with arbitrary cutoffs and uses your entire dataset.\n\n-   **The GSEA Workflow (Conceptual):**\n\n    1.  **Start with the universe:** You have your list of all 20,000 genes.\n\n    2.  **Rank the ENTIRE list:** Instead of creating a short list, *you rank all 20,000 genes from \"most upregulated\" at the top to \"most downregulated\" at the bottom*. This ranking is typically based on a metric that combines the fold change and the p-value (like the t-statistic).\n\n    3.  **Ask the GSEA question:** Now, for the 'Apoptosis' pathway, GSEA asks a much more elegant question: **\"Are the 100 genes belonging to the 'Apoptosis' pathway randomly distributed throughout my entire ranked list of 20,000 genes, or do they show a tendency to accumulate at the top (upregulated) or the bottom (downregulated)?\"**\n\n-   **The Visual Analogy:** Imagine your 20,000 genes are runners in a marathon, ranked from first to last place. The 'Apoptosis' genes are all wearing blue shirts. GSEA asks: \"Are the blue-shirted runners spread randomly throughout the entire pack of 20,000 runners, or are they suspiciously clustered together near the finish line?\"\n\n#### **Why GSEA is More Powerful**\n\n-   **It is Threshold-Free:** ***It uses all of your data. No information is thrown away.***\n\n-   **It is More Sensitive:** It can detect those subtle but coordinated changes. In our example of the signaling cascade where all 20 genes had a log2FC of 0.5, ORA would miss it completely. GSEA, however, would easily detect that all 20 of these genes are accumulating together near the top of the ranked list and would report the pathway as highly significant.\n\n### **Lesson 1: Summary & Status Check**\n\n-   **Conceptually**, we now understand the critical difference between the two main types of enrichment analysis.\n\n    -   **ORA (Over-Representation Analysis):** Asks if a pathway is over-represented in a short, pre-defined list of significant genes. It is simple but suffers from arbitrary cutoffs and loss of information.\n\n    -   **GSEA (Gene Set Enrichment Analysis):** Asks if a pathway's member genes are non-randomly distributed at the top or bottom of the entire ranked list of all genes. It is threshold-free and more sensitive to subtle, coordinated changes.\n\n------------------------------------------------------------------------\n\n### Lesson 2: The GSEA Algorithm, Step-by-Stepü§©\n\n**Goal:** To understand the three logical stages of the GSEA algorithm: Ranking, Calculating the Enrichment Score, and Assessing Significance.\n\n#### **Step 1: Create a Master Ranked List of All Genes**\n\n**The Concept:** The foundation of GSEA is a single, ranked list that represents your entire experiment. This list must capture both the **magnitude** (how much did it change?) and the **significance** (how confident are we in this change?) for every single gene you measured.\n\n**The Method:**\n\n1.  You start with your differential expression results table (from `DESeq2, limma,` etc.). This table has a log2 Fold Change (logFC) and a p-value for all 20,000 genes.\n\n2.  You cannot simply rank by fold change, because a gene with a huge fold change but a terrible p-value is not reliable. You cannot simply rank by p-value, because a tiny p-value with a near-zero fold change is not biologically interesting.\n\n3.  Therefore, you must combine these into a single **ranking metric**. Common and effective choices include:\n\n    -   The **t-statistic** from the `limma` output.\n\n    -   The stat column from the `DESeq2` output.\n\n    -   A manually calculated metric like: ***`sign(logFC) * -log10(pvalue).`***\n\n4.  You then rank all 20,000 genes in ***descending order based on this metric***. The result is a single list where the gene with the highest positive metric (most strongly upregulated) is at position #1, and the gene with the most negative metric (most strongly downregulated) is at position #20,000.\n\n#### **Step 2: Calculate the Enrichment Score (ES)**\n\n**The Concept:** This is the heart of the algorithm. For a single gene set (e.g., the \"Hallmark Apoptosis\" set, which contains 161 genes), we want to calculate a score that tells us if its members are clustered at the top or bottom of our master ranked list. GSEA does this using an elegant \"random walk\" method.\n\n**The \"Random Walk\" Analogy:**\\\nImagine you are walking from the #1 ranked gene down to the #20,000th gene. You have a pencil and are drawing a graph.\n\n-   You start your pencil at **zero**.\n\n-   Every time you pass a gene that is **IN** your gene set (a \"hit\"), you take a big step **UP**. The size of the step is proportional to the gene's ranking metric (so hits at the very top give bigger steps up).\n\n-   Every time you pass a gene that is **NOT** in your gene set (a \"miss\"), you take a small step **DOWN**.\n\n**The Calculation:**\n\n1.  The algorithm walks down the ranked list from gene 1 to 20,000.\n\n2.  It keeps a running-sum statistic. When it encounters a gene belonging to the \"Apoptosis\" set, it increases the running sum. When it encounters a gene not in the set, it decreases the running sum.\n\n3.  This creates a \"mountain range\" plot. If the apoptosis genes are randomly distributed, the line will just jitter(ÊäñÂä®) randomly around zero.\n\n4.  **However**, if the apoptosis genes are clustered at the top of the list, you will get a series of big steps UP at the beginning, causing the running sum to climb rapidly to a large positive value before it starts to drift back down.\n\n5.  If the apoptosis genes are clustered at the bottom, you will get a series of small steps DOWN for a long time, followed by a series of big steps UP at the very end. This will cause the running sum to drift negatively to a large negative value.\n\n**The Enrichment Score (ES):** The ES is defined as the **maximum deviation of the running sum from zero(ËøêË°åÊÄªÂíå‰∏éÈõ∂ÁöÑÊúÄÂ§ßÂÅèÂ∑Æ)**.\n\n-   A large **positive ES** means the gene set is enriched ***at the top of the list*** (associated with the ***\"upregulated\" phenotype)***.\n\n-   A large **negative ES** means the gene set is enriched ***at the bottom of the list*** (associated with the ***\"downregulated\" phenotype***).\n\n-   An ES close to **zero** means the ***gene set is not enriched*** (its members are ***scattered randomly***).\n\n(This is the classic GSEA plot we will learn to make. ***The green line is the \"random walk\". The peak of that line is the ES***.)\n\n#### **Step 3: Assess the Statistical Significance**\n\n**The Concept:** We have an ES for \"Apoptosis\" (e.g., 0.72). But is that score impressive? Could we have gotten a score that high just by random chance with a random set of 161 genes? We need to calculate a ***p-value.***\n\n**The Method: Permutation Testing(ÊéíÂ∫èÊµãËØï)**\\\nGSEA establishes significance in a very clever and robust way: **it creates its own null distribution by shuffling the data.**\n\n1.  The algorithm takes our master ranked list of 20,000 genes.\n\n2.  It then **randomly shuffles(Êâì‰π±) the gene labels**. Now the ranking metrics are ***associated with the wrong genes***. This creates a \"random\" ranked list.\n\n3.  It ***re-calculates*** the Enrichment Score for \"Apoptosis\" using this shuffled list. It records this new, random ES.\n\n4.  It repeats this shuffling process **thousands of times** (e.g., 10,000 times), generating a null distribution of 10,000 random Enrichment Scores. This distribution shows what a typical ES looks like for the \"Apoptosis\" set when there is no real biological signal.\n\n5.  **The p-value** is then calculated as the fraction of random ES scores from the null distribution that were equal to or more extreme than the actual ES we observed from our real data(ÁÑ∂ÂêéËÆ°ÁÆó p ÂÄºÔºå‰Ωú‰∏∫‰ªéÈõ∂ÂàÜÂ∏É‰∏≠ÈöèÊú∫ ES ÂàÜÊï∞‰∏≠Á≠â‰∫éÊàñÊØîÂÆûÈôÖËßÇÂØüÂà∞ÁöÑÁúüÂÆûÊï∞ÊçÆ ES Êõ¥ÊûÅÁ´ØÁöÑÂàÜÊï∞ÁöÑÊØî‰æã„ÄÇ).\n\n6.  Finally, because we are testing thousands of gene sets at once, it calculates a **False Discovery Rate (FDR)** or adjusted p-value to correct for multiple testing. ***This FDR is the most important value for determining significance.***\n\n**Normalization (NES):** The raw ES is dependent on the size of the gene set. To compare enrichment between a small set and a large set, the score is normalized. This **Normalized Enrichment Score (NES)** is what is typically used for ranking and comparing significant pathways.\n\n### **Lesson 2: Summary & Status Check**\n\n-   **Conceptually**, we have dissected the GSEA algorithm into its three essential parts. We understand that it is a **Rank-then-Walk-then-Shuffle(ÊéíÂ∫è-ÈÅçÂéÜ-ÈáçÊéí)** process.\n\n    1.  **Rank:** Create a master list of all genes based on a robust metric.\n\n    2.  **Walk:** Calculate an **Enrichment Score (ES)** by walking down the list and seeing if a gene set's members accumulate at either end.\n\n    3.  **Shuffle:** Determine the significance of the ES by comparing it to a null distribution created by thousands of **permutations(ÊéíÂàó)** of the gene labels.\n\n------------------------------------------------------------------------\n\n### Lesson 3: The Gene Sets - Your Biological Prior Knowledgeü§ß\n\n**Goal:** To understand the concept of a gene set and to become familiar with the Molecular Signatures Database (`MSigDB`), the gold-standard resource for curated gene sets.\n\n#### **Concept 1: What is a Gene Set?**\n\nA gene set is simply a **list of genes that share a common biological function, location, or regulation.** It represents a ***piece of pre-existing***, curated(Êï¥ÁêÜËøáÁöÑ) biological knowledge. Think of it as a ***pre-defined \"team\" of genes.***\n\n-   **Example 1: A KEGG Pathway Gene Set.** The \"KEGG GLYCOLYSIS\" gene set would be a list of all the genes that encode the enzymes involved in the glycolysis pathway.\n\n-   **Example 2: A GO Term Gene Set.** The \"GO DNA REPAIR\" gene set would be a list of all genes that have been annotated with the \"DNA Repair\" Gene Ontology term.\n\n-   **Example 3: A Regulatory Gene Set.** A gene set could be a list of all genes that have a binding site for a particular transcription factor (like TP53) in their promoter(ÂêØÂä®Â≠ê) region.\n\nGSEA is a general method. The biological meaning of its output is entirely dependent on the quality and nature of the gene sets you use as input.\n\n#### **Concept 2: The Gold Standard - The Molecular Signatures Database (MSigDB)**\n\nManually creating these gene sets would be a monumental(Ëâ∞Â∑®) task. Thankfully, the Broad Institute (the same group that created GSEA) maintains the **Molecular Signatures Database (MSigDB)**. ***This is a massive, meticulously curated collection of thousands of gene sets that is freely available to the scientific community.***\n\nMSigDB is the canonical(ÈÄöÁî®) resource for GSEA. It is organized into several major collections, and knowing the main ones is crucial for any bioinformatician.\n\n#### **The Key MSigDB Collections**\n\nHere are the most important collections you will encounter. Each one is designed to answer a different type of biological question.\n\n-   **H: Hallmark(Ê†áÂøó) Gene Sets (The Best Place to Start)**\n\n    -   **What it is:** This is the smallest and most refined collection, consisting of only **50 gene sets**. Each Hallmark set represents a well-defined, core biological process (e.g., \"HALLMARK_APOPTOSIS\", \"HALLMARK_INFLAMMATORY_RESPONSE\").\n\n    -   **How it was made:** The MSigDB curators used a sophisticated computational approach to distill the thousands of overlapping gene sets from other collections down to their essential, non-redundant core.\n\n    -   **Why you should use it:** It reduces noise and redundancy, making the results much easier to interpret. For most analyses, **starting with the Hallmark collection is the recommended best practice.**\n\n-   **C2: Curated Gene Sets**\n\n    -   **What it is:** This is a massive collection (over 6,000 sets) gathered from various online pathway databases, publications, and knowledge bases.\n\n    -   **Sub-collections:** It is divided into important sub-collections:\n\n        -   **C2:CP:KEGG:** Gene sets from the famous KEGG pathway database.\n\n        -   **C2:CP:Reactome:** Gene sets from the highly detailed Reactome pathway database.\n\n        -   **C2:CP:BioCarta:** Gene sets from the BioCarta pathway database.\n\n    -   **Why you should use it:** When you want to investigate specific, well-known canonical pathways. It's more detailed than the Hallmark collection but also more redundant (e.g., many KEGG pathways will overlap).\n\n-   **C5: GO Gene Sets**\n\n    -   **What it is:** A very large collection (over 10,000 sets) where each gene set corresponds to a Gene Ontology (GO) term.\n\n    -   **Sub-collections:**\n\n        -   **C5:GO:BP:** For Biological Process.\n\n        -   **C5:GO:MF:** For Molecular Function.\n\n        -   **C5:GO:CC:** For Cellular Component.\n\n    -   **Why you should use it:** When you want to explore biological functions in a more granular and comprehensive way than just looking at pathways. The results can be very detailed but also highly redundant.\n\n-   **C3: Regulatory Target Gene Sets**\n\n    -   **What it is:** Gene sets where all the genes are thought to be regulated by a specific transcription factor or microRNA.\n\n    -   **Why you should use it:** When your primary question is about gene regulation. For example, if your experiment involves knocking out a transcription factor, you would use this collection to see if its known target genes are significantly downregulated.\n\n### **Lesson 3: Summary & Status Check**\n\n-   **Conceptually**, we understand that GSEA's power comes from leveraging prior biological knowledge in the form of **curated gene sets**.\n\n-   We have been introduced to the **MSigDB database** as the central, authoritative resource for these gene sets.\n\n-   **Crucially**, we now know the major MSigDB collections and have a strategic plan for using them:\n\n    1.  **Always start with the Hallmark (H) collection** for a high-level, easy-to-interpret view of the results.\n\n    2.  If needed, follow up with more detailed collections like **KEGG/Reactome (C2)** or **Gene Ontology (C5)** to explore more specific hypotheses.\n\nWe have now completed our tour of the core concepts of GSEA. We understand why it's better than ORA, how the algorithm works, and what biological knowledge it uses as input.\n\n------------------------------------------------------------------------\n\n## üò•**Part 2: A Practical GSEA Project in Rüòá**\n\n**Project:** \"**Analyzing the Transcriptional Response to Estrogen(ÈõåÊøÄÁ¥†) Treatment in a Breast Cancer Cell Line (MCF7)**.\"\n\n**Biological Question:** \"Estrogen is a key hormone that drives the growth of certain breast cancers. We want to use GSEA to identify the core biological pathways and hallmark processes that are activated or suppressed in MCF7 cells after estrogen treatment.\"\n\n**Our Starting Point:** We will pretend a colleague has already performed the RNA-seq experiment and the differential expression analysis using DESeq2. They have handed us a single `CSV` file: `estrogen_deg_results.csv.` This file contains the complete results for all \\~20,000 detected genes.\n\n------------------------------------------------------------------------\n\n### **Lesson 4: Project Setup and Data PreparationüôÇ‚Äç‚ÜîÔ∏è**\n\n**Goal:** To set up our R environment, load the differential expression results, and, most importantly, ***create the master ranked list of genes that will be the primary input for our GSEA.***\n\n#### **Chunk 1: Project Setup and Installing Packages**\n\n**Explanation:** First, we'll create an organized project structure. Then, we will install the two key R packages we need for this entire analysis.\n\n-   **`fgsea`:** An R package for running a Fast Preranked(ÊéíÂ∫è) Gene Set Enrichment Analysis. It's extremely fast and widely used in the community.\n\n-   **`msigdbr`:** A brilliant helper package that allows us to download and format gene sets directly from the MSigDB database inside R, saving us from manual downloads.\n\n**Action:**\n\n1.  On your computer, create a new project folder: `Project_GSEA_Estrogen.`\n\n2.  Inside, create the sub-folders: `data`, `scripts`, and `figures`.\n\n3.  In RStudio, create a new R Project in this main folder.\n\n4.  Create a new R script and save it in the scripts folder as `01_gsea_analysis.R.`\n\n5.  In the R console, install the necessary packages:\n\n   \n\n    ```r         \n    install.packages(\"fgsea\")\n    install.packages(\"msigdbr\")\n    install.packages(\"tidyverse\") # For data manipulation and plotting\n    ```\n\n#### **Chunk 2: Loading the Differential Expression Data**\n\n**Explanation:** We need to load our colleague's results file into R. For this lesson, since we don't have a real file, I will provide code that creates a realistic, sample data frame. In a real project, you would simply use `read.csv()` to load your file. We will then inspect the data to understand its structure.\n\n**Action:**\\\nAdd the following code to your `01_gsea_analysis.R` script.\n\n\n```r         \n# --------------------------------------------------------------------------\n# Script: 01_gsea_analysis.R\n# Project: GSEA of Estrogen Response in MCF7 Cells\n# --------------------------------------------------------------------------\n\n# Load the libraries\nlibrary(tidyverse)\nlibrary(fgsea)\nlibrary(msigdbr)\n\n# --- 1. Load and Prepare the Data ---\n\n# In a real project, you would load your data like this:\n# deg_results <- read.csv(\"data/estrogen_deg_results.csv\")\n\n# For this tutorial, we will CREATE a sample data frame that\n# looks just like a real differential expression results file.\nset.seed(42) # for reproducibility\ndeg_results <- data.frame(\n  gene_symbol = paste0(\"GENE\", 1:1000),\n  log2FoldChange = rnorm(1000, 0, 1.5),\n  pvalue = runif(1000, 0, 1),\n  padj = p.adjust(runif(1000, 0, 1), method = \"BH\")\n)\n# Let's make some genes look like they are part of an estrogen response\ndeg_results$log2FoldChange[1:50] <- rnorm(50, 2, 0.5)\ndeg_results$pvalue[1:50] <- runif(50, 0, 0.01)\ndeg_results$padj[1:50] <- p.adjust(deg_results$pvalue[1:50], method = \"BH\")\n\n# Inspect the loaded data\nhead(deg_results)\n```\n\n-   **Run this code.** You now have a data frame called `deg_results`. Look at the first few rows. You'll see it has the essential columns: `a gene identifier (gene_symbol), a log2FoldChange, and adjusted p-values (padj).`\n\n#### **Chunk 3: Creating the Ranked Gene List**\n\n**Explanation:** This is the most critical preparatory step in the entire analysis. As we learned in Lesson 2, GSEA does not take the whole data frame as input. It requires a single, **named, ranked vector**.\n\n-   **The values** in the vector will be our ***ranking metric***.\n\n-   **The names** of the vector elements will be the corresponding gene symbols.\n\nWe will create this ranked list, handle any potential issues like missing values or duplicate gene names, and then sort it in descending order.\n\n**Action:**\\\nAdd this chunk to your script.\n\n\n\n```r         \n# --- 2. Create the Ranked Gene List for GSEA ---\n\n# First, let's create our ranking metric. A good choice is sign(logFC) * -log10(pvalue)\n# This captures both magnitude/direction and significance.\ndeg_results$rank_metric <- sign(deg_results$log2FoldChange) * -log10(deg_results$pvalue)\n\n# Next, we create the named vector.\n# 1. Filter out any genes with NA values in our metric.\n# 2. Handle duplicate gene symbols. Some genes might be measured by multiple probes.\n#    We will keep the one with the highest absolute rank metric.\nranked_genes <- deg_results %>%\n  filter(!is.na(rank_metric)) %>%\n  group_by(gene_symbol) %>%\n  slice_max(order_by = abs(rank_metric), n = 1) %>%\n  ungroup() %>%\n  # Now, pull the metric and gene symbols into the named vector format\n  pull(rank_metric, name = gene_symbol)\n\n# Finally, sort the vector in descending order. This is required by fgsea.\nranked_genes <- sort(ranked_genes, decreasing = TRUE)\n\n# Let's inspect our final ranked list. This is the direct input for GSEA.\ncat(\"--- Our final ranked gene list ---\\n\")\nhead(ranked_genes)\ncat(\"\\n... (and at the other end) ...\\n\")\ntail(ranked_genes)\ncat(\"\\nTotal number of ranked genes:\", length(ranked_genes), \"\\n\")\n```\n\n-   **Run this code.**\n\n-   **Verification:** Inspect the output in your console. You should see a list of numbers (the ranking metric) with gene symbols as their names. The `head()` output will show the genes with the largest positive metric (our most upregulated genes), and the `tail()` output will show the genes with the most negative metric (our most downregulated genes). You have successfully created the exact data structure that `fgsea` needs.\n\n### **Lesson 4: Summary & Status Check**\n\n-   **Conceptually**, we have put our theoretical knowledge into practice. We understand that the goal of this stage is not just to load data, but to distill it into a master ranked list that captures the full result of our differential expression experiment.\n\n-   **Practically**, we have set up our project, installed the necessary tools, loaded our data, and, most importantly, have written the code to convert a standard DEG results table into the specific **named, sorted vector** format required for GSEA.\n\n------------------------------------------------------------------------\n\n### **Lesson 5: Acquiring Gene SetsüôÅ**\n\n**Goal:** To use the `msigdbr` R package to download the Hallmark gene sets for Homo sapiens and format them into the specific list structure that the `fgsea` package requires.\n\n#### **Chunk 1: Understanding the `msigdbr` Package**\n\n**Explanation:** In the past, scientists had to go to the Broad Institute's website, manually download a `.gmt` file, and then write code to parse that file. The `msigdbr` package makes this entire process obsolete and much more reproducible.\n\n-   It provides a single function, `msigdbr()`, that connects directly to the MSigDB database.\n\n-   You can specify the species you want (e.g., \"Homo sapiens\", \"Mus musculus(Â∞èÂÆ∂Èº†)\").\n\n-   You can specify the category you are interested in (e.g., \"H\" for Hallmark, \"C2\" for Curated, \"C5\" for GO).\n\n-   The function returns a tidy data frame, which is much easier to work with than the old `.gmt` files.\n\n#### **Chunk 2: Downloading the Hallmark Gene Sets**\n\n**Explanation:** As we discussed in Lesson 3, the Hallmark collection is the best place to start. It provides a high-level, non-redundant view of the most important biological processes. We will use the `msigdbr` function to fetch this collection for humans.\n\n**Action:**\\\nAdd this chunk to your `01_gsea_analysis.R` script.\n\n\n\n```r         \n# --- 3. Acquire the Gene Sets from MSigDB ---\n\n# We will use the msigdbr package to get the Hallmark gene sets for humans.\n# msigdbr(species = \"Homo sapiens\", category = \"H\")\n\n# Let's pull the data and inspect it\nhallmark_sets_df <- msigdbr(species = \"Homo sapiens\", category = \"H\")\n\n# Inspect the resulting data frame\nhead(hallmark_sets_df)\n```\n\n-   **Run this code.**\n\n-   **Verification:** Look at the `hallmark_sets_df data` frame. You will see it has a very simple and useful structure. ***Each row represents one gene belonging to one gene set. The key columns are:***\n\n    -   `gs_name`: The name of the gene set (e.g., \"HALLMARK_APOPTOSIS\").\n\n    -   `gene_symbol`: The gene that is a member of that set.\\\n        This tidy format is a great starting point.\n\n#### **Chunk 3: Formatting the Gene Sets for `fgsea`**\n\n**Explanation:** The `fgsea` package is very efficient, and to achieve this speed, it requires the gene sets to be in a specific format: a **named list**.\n\n-   Each **element** **of the list should be a gene set.**\n\n-   The **name** ***of each list element should be the name of the gene set (e.g., \"HALLMARK_APOPTOSIS\").***\n\n-   The **content** ***of each list element should be a simple character vector of all the gene symbols belonging to that set.***\n\nWe need to convert the data frame we just downloaded from `msigdbr` into this list format. While this can be done in several ways in R, using the `split()` and `lapply()` functions or a loop, the `tidyverse` approach with `split()` is often very concise.\n\n**Action:**\\\nAdd this final chunk for the lesson to your script.\n\n\n\n```r         \n# The fgsea function requires the gene sets to be in a named list format.\n# We will convert the data frame from msigdbr into this format.\n\n# The 'split()' function is perfect for this. It splits the 'gene_symbol' column\n# into a list, based on the values in the 'gs_name' column.\nhallmark_sets_list <- split(x = hallmark_sets_df$gene_symbol, f = hallmark_sets_df$gs_name)\n\n# Let's inspect our final gene set list to verify the format.\ncat(\"--- Our final gene set list for fgsea ---\\n\")\n# Look at the first two pathways in the list\nstr(head(hallmark_sets_list, 2))\n```\n\n-   **Run this code.**\n\n-   **Verification:** The `str()` command is our proof. The output in the console will show the structure of our new object, `hallmark_sets_list`. You should see that it is a \"List of 50\" (because there are 50 Hallmark sets). When you expand the first element, you will see something like:\n\n    ```         \n    $ HALLMARK_ADIPOGENESIS: chr [1:200] \"ACSL1\" \"SCD\" \"FASN\" ...\n    ```\n\n    This confirms we have the exact format required: a named list where each element is a vector of gene symbols.\n\n### **Lesson 5: Summary & Status Check**\n\n-   **Conceptually**, we understand that we need a source of high-quality, curated gene sets to power our GSEA, and that MSigDB is the standard for this.\n\n-   **Practically**, we have used the modern and reproducible `msigdbr` package to programmatically fetch the Hallmark gene sets directly into R. We have also successfully transformed this data into the specific **named list format** required by our analysis tool, `fgsea`.\n\nWe have now prepared both of our key inputs:\n\n1.  `ranked_genes`: Our data-driven ranked list from the experiment.\n\n2.  `hallmark_sets_list`: Our knowledge-driven list of biological pathways.\n\nThe stage is perfectly set. We are ready to bring these two inputs together and run the GSEA.\n\n------------------------------------------------------------------------\n\n### **Lesson 6: Running the GSEA and Interpreting the Results Tableü§©**\n\n**Goal:** To use the `fgsea` package to run the Gene Set Enrichment Analysis, to understand the structure of the results table it produces, and to identify the statistically significant pathways.\n\n#### **Chunk 1: Running the `fgsea` Function**\n\n**Explanation:** The `fgsea` package is beautifully designed. The main function, `fgsea()`, is simple to use because we've already done the hard work of formatting our inputs correctly. It takes our list of pathways (`hallmark_sets_list`), our ranked gene list (`ranked_genes`), and a few other parameters. ***One key parameter is `nPermSimple` (previously `nperm`), which tells the function how many permutations(ÊéíÂ∫è) to run to build the null distribution for calculating the p-values. A value of 10,000 is a robust choice for a final analysis.***\n\n**Action:**\\\nAdd this chunk to your `01_gsea_analysis.R` script.\n\n\n\n```r         \n# --- 4. Run the Gene Set Enrichment Analysis ---\n\n# Set a seed for reproducibility of the random permutations\nset.seed(42)\n\n# Run the fgsea algorithm!\nfgsea_results <- fgsea(\n  pathways = hallmark_sets_list,\n  stats = ranked_genes,\n  nPermSimple = 10000 # Number of permutations\n)\n\n# Let's inspect the results table\nhead(fgsea_results)\n```\n\n-   **Run this code.** The `fgsea` function is highly optimized and should complete the 10,000 permutations very quickly. The result, `fgsea_results`, is a data frame (technically a \"data.table\") containing the GSEA results for every one of the 50 Hallmark pathways.\n\n#### **Chunk 2: Understanding the GSEA Results Table**\n\n**Explanation:** The `fgsea_results` table is the core output of our analysis. To use it, we must understand what each column means. Let's go through the most important ones.\n\n-   `pathway`: The name of the gene set from MSigDB (e.g., \"HALLMARK_APOPTOSIS\").\n\n-   `pval`: The raw statistical p-value calculated from the permutation test. It tells you the probability of getting an Enrichment Score (ES) as extreme as the one observed, just by random chance.\n\n-   `padj`: The **adjusted p-value** (or FDR, or q-value). This is the p-value after correcting for the fact that we tested 50 different pathways at once (the multiple testing problem). **This is the most important column for determining statistical significance.** ***A common cutoff is `padj < 0.05` or `padj < 0.1`***.\n\n-   `ES`: The **Enrichment Score**. This is the peak of the \"random walk\" we discussed in Lesson 2. ***It reflects the degree to which a gene set is over-represented at the extremes of the ranked list.***\n\n-   `NES`: The **Normalized Enrichment Score**. This is the most important score for interpretation.\n\n    -   The ES is normalized to account for the size of the gene set, allowing you to compare the results for a small gene set versus a large gene set.\n\n    -   The **sign of the NES** is critical:\n\n        -   **Positive NES:** The pathway is enriched at the **top** of your ranked list. In our case, this means it's associated with genes that were **upregulated** by estrogen.\n\n        -   **Negative NES:** The pathway is enriched at the **bottom** of your ranked list, meaning it's associated with genes that were **downregulated** by estrogen.\n\n-   `size`: The number of genes in the pathway after filtering to only the genes present in our dataset.\n\n-   `leadingEdge`: ***A list of the core member genes of the pathway that contributed most to the ES***. We will look at this more in the next lesson.\n\n#### **Chunk 3: Filtering and Ordering the Results**\n\n**Explanation:** The results table is often long and not sorted in the most useful way. Our first analytical task is to ***filter this table to find the significant pathways and then order them to see the most important biological findings***. We will filter by the adjusted `p-value (padj)` and then sort by the `NES` to ***see the top upregulated and downregulated pathways.***\n\n**Action:**\\\nAdd this chunk to your script.\n\n\n\n```r         \n# --- 5. Interpret the Results ---\n\n# First, let's filter for the significantly enriched pathways\nsignificant_pathways <- fgsea_results %>%\n  filter(padj < 0.05) %>%\n  arrange(desc(NES)) # Sort by NES to see top positive and negative pathways\n\n# Print the significant results\ncat(\"--- Significant Enriched Pathways (padj < 0.05) ---\\n\")\nprint(significant_pathways[, .(pathway, NES, padj, size)]) # Show key columns\n\n# Let's separate the top upregulated and downregulated pathways for clarity\ntop_positive_pathways <- significant_pathways %>%\n  filter(NES > 0) %>%\n  head(10)\n\ntop_negative_pathways <- significant_pathways %>%\n  filter(NES < 0) %>%\n  head(10)\n\n# You can also create a nice summary plot of the top pathways\nplot_data <- bind_rows(top_positive_pathways, top_negative_pathways)\n\nsummary_plot <- ggplot(plot_data, aes(x = NES, y = reorder(pathway, NES))) +\n  geom_col(aes(fill = NES > 0)) +\n  scale_fill_manual(values = c(\"TRUE\" = \"#d95f02\", \"FALSE\" = \"#1b9e77\"), guide = \"none\") +\n  labs(\n    title = \"Top Enriched Hallmark Pathways in Estrogen Response\",\n    x = \"Normalized Enrichment Score (NES)\",\n    y = \"Hallmark Pathway\"\n  ) +\n  theme_minimal()\n\nprint(summary_plot)\nggsave(\"figures/01_gsea_summary_plot.png\", summary_plot, width = 10, height = 8)\n```\n\n-   **Run this code.**\n\n-   **Verification:**\n\n    1.  The printed table in your console is your first key result. It gives you a clean, easy-to-read list of the pathways that were significantly affected by the treatment. This is a core component of your final report.\n\n    2.  The bar chart (`summary_plot`) is your visual proof and a powerful summary figure. It immediately communicates the main findings. The orange bars(Êù°Ê°Ü) are the key processes activated by estrogen, and the green bars are the processes that were suppressed.\n\n### **Lesson 6: Summary & Status Check**\n\n-   **Conceptually**, we now understand the meaning of the key outputs of a GSEA: the padj for significance, and the NES for the magnitude and direction of the enrichment.\n\n-   **Practically**, we have successfully run the fgsea function on our data and have written the code to filter, sort, and display the results in both a tabular and a graphical format.\n\n-   **Crucially**, we have followed the \"Trust, but Verify\" principle by inspecting the results table and creating a summary plot that confirms our findings and is suitable for a presentation or publication.\n\n------------------------------------------------------------------------\n\n### **Lesson 7: Visualizing the Resultsüç¨**\n\n**Goal:** To understand how to read the classic GSEA enrichment plot and to use `fgsea` to generate these plots for our top significant pathways.\n\n#### **Chunk 1: Deconstructing the GSEA Enrichment Plot**\n\n**Explanation:** The GSEA enrichment plot is one of the most iconic and information-rich visualizations in bioinformatics. It can look intimidating at first, but it's actually a brilliant summary of the entire GSEA algorithm for a single gene set. Let's break it down into its three main components, from top to bottom.\n\n1.  **The Top Panel (The \"Mountain\"): The Enrichment Score (ES) Plot.**\n\n    -   This is the \"random walk\" we discussed in Lesson 2.\n\n    -   The **y-axis** is the running-sum Enrichment Score(Á¥ØËÆ°‰∏∞ÂØåÂàÜÊï∞).\n\n    -   The **x-axis** represents the position in your master ranked list of all genes (from most upregulated on the left to most downregulated on the right).\n\n    -   The peak (or valley) of this green line is the final ES for the pathway. A peak on the left means the pathway is enriched in upregulated genes. A valley on the right means it's enriched in downregulated genes.\n\n2.  **The Middle Panel (The \"Barcodes\"): The Hit Ticks.**\n\n    -   This is the simplest but most important part of the plot.\n\n    -   Each vertical black line (a \"tick\") shows the position of a gene that is a **member of this specific gene set** (\"a hit\") within the master ranked list.\n\n    -   This panel allows you to see the distribution of the gene set members at a glance. If you see the barcodes clustering on the left side, it visually confirms that the genes in this set tend to be highly ranked (upregulated).\n\n3.  **The Bottom Panel (The \"Heatmap\"): The Ranking Metric.**\n\n    -   This is a heatmap of the ranking metric for all genes in your master list.\n\n    -   It's typically colored red for the highest positive ranks (upregulated) and blue for the most negative ranks (downregulated).\n\n    -   This provides a global view of the entire experimental trend and serves as a backdrop for the other two panels.\n\n#### **Chunk 2: Plotting the Top Upregulated Pathway**\n\n**Explanation:** The `fgsea` package provides a simple function, `plotEnrichment()`, to generate these beautiful plots. All it needs is the specific pathway name you want to visualize and the ranked stats list we already created. Let's create a plot for our most significantly **upregulated** pathway.\n\n**Action:**\\\nAdd this chunk to your 01_gsea_analysis.R script.\n\n\n\n```r         \n# --- 6. Visualize Specific Pathway Results ---\n\n# Let's find the name of our top positively enriched pathway\ntop_pathway_positive <- significant_pathways %>%\n  filter(NES > 0) %>%\n  slice_max(order_by = NES, n = 1) %>%\n  pull(pathway)\n\ncat(\"Plotting top POSITIVE pathway:\", top_pathway_positive, \"\\n\")\n\n# Create the enrichment plot\npositive_plot <- plotEnrichment(\n  pathway = hallmark_sets_list[[top_pathway_positive]],\n  stats = ranked_genes\n) + \n  labs(title = top_pathway_positive)\n\n# Display and save the plot\nprint(positive_plot)\nggsave(paste0(\"figures/02_enrichment_plot_\", top_pathway_positive, \".png\"), positive_plot, width = 7, height = 5)\n```\n\n-   **Run this code.**\n\n-   **Verification:** A new plot will appear. This is your proof.\n\n    -   Observe the **green line**: It should rise sharply on the left side, indicating a positive Enrichment Score.\n\n    -   Observe the **barcodes**: You should see a high density of black tick marks clustered on the far left, visually confirming that the member genes of this pathway are highly concentrated among the most upregulated genes in your experiment.\n\n#### **Chunk 3: Plotting the Top Downregulated Pathway**\n\n**Explanation:** Now we will do the exact same thing for our most significantly **downregulated** pathway. This demonstrates the symmetry of the analysis.\n\n**Action:**\\\nAdd this final chunk to your script.\n\n\n\n```r         \n# Now let's plot the top NEGATIVELY enriched pathway\ntop_pathway_negative <- significant_pathways %>%\n  filter(NES < 0) %>%\n  slice_min(order_by = NES, n = 1) %>%\n  pull(pathway)\n\ncat(\"Plotting top NEGATIVE pathway:\", top_pathway_negative, \"\\n\")\n\n# Create the enrichment plot\nnegative_plot <- plotEnrichment(\n  pathway = hallmark_sets_list[[top_pathway_negative]],\n  stats = ranked_genes\n) + \n  labs(title = top_pathway_negative)\n\n# Display and save the plot\nprint(negative_plot)\nggsave(paste0(\"figures/03_enrichment_plot_\", top_pathway_negative, \".png\"), negative_plot, width = 7, height = 5)\n```\n\n-   **Run this code.**\n\n-   **Verification:** A second enrichment plot will appear.\n\n    -   Observe the **green line**: It should drift downwards for a long time and form a deep valley on the right side, indicating a negative Enrichment Score.\n\n    -   Observe the **barcodes**: You will now see the black tick marks clustered on the **far right**, visually confirming that the members of this pathway are highly concentrated among the most downregulated genes in your experiment.\n\n### **Grand Conclusion of the GSEA Project**\n\nWe have successfully completed a full, professional GSEA workflow from start to finish. Let's recap the story we've built.\n\n1.  **The Concept:** We started by understanding that GSEA is a powerful, threshold-free method that asks if a gene set's members accumulate at the top or bottom of a ranked list of all our genes.\n\n2.  **Data Prep:** We loaded our differential expression results and meticulously converted them into the required master **ranked gene list**.\n\n3.  **Gene Sets:** We programmatically fetched the high-quality **Hallmark gene sets** from the MSigDB database.\n\n4.  **Running GSEA:** We ran the `fgsea` algorithm to calculate the NES and FDR for all 50 Hallmark pathways.\n\n5.  **Interpreting Results:** We created a **summary bar plot** showing the top up- and down-regulated pathways, giving us the high-level biological story.\n\n6.  **Detailed Visualization:** We generated classic **GSEA enrichment plots** for our top hits, providing the detailed, verifiable evidence of why those pathways were significant.\n\n**The Final Result:**\\\nYou now have a set of high-quality, publication-ready figures and a statistically robust table that tells a compelling story about your experiment. You can confidently say, for example:\n\n\"Our Gene Set Enrichment Analysis reveals that estrogen treatment in MCF7 cells leads to a significant activation of the 'HALLMARK_MYC_TARGETS_V1' and 'HALLMARK_E2F_TARGETS' pathways, consistent with increased cell proliferation. Conversely, we observed a significant suppression of the 'HALLMARK_TNFA_SIGNALING_VIA_NFKB' pathway...\"\n\n### `Then you could to leverage the power of the GSEA¬†method¬†you have already learned and apply it strategically to different¬†collections of gene sets¬†to go from a high-level summary (Hallmark) to a detailed, mechanistic understanding (KEGG, GO). You don't need to learn a new method; you just need to swap out the biological knowledge base you are testing against.`","srcMarkdownNoYaml":"\n\n# üçîGSNA ÊïôÁ®ãü§ó\n\n------------------------------------------------------------------------\n\n## ü§™Part 1 : The Core Concepts of GSEAü§†\n\n------------------------------------------------------------------------\n\n### Lesson 1: The Key Question - Moving Beyond Arbitrary Cutoffsü•∂\n\n**Goal:** To understand the limitations of standard \"cutoff-based\"(Âü∫‰∫éÊà™Ëá≥ÂÄº) enrichment analysis and to grasp the fundamentally different and more powerful question that GSEA asks.\n\n#### **The \"Classic\" Way: Over-Representation Analysis (ORA)**\n\nLet's first revisit the type of enrichment analysis we have already performed in our proteomics and metabolomics projects. This method is formally called **Over-Representation Analysis (ORA)**.\n\n-   **The ORA Workflow:**\n\n    1.  **Start with a universe:** You have a list of all genes/proteins/metabolites detected in your experiment (e.g., 20,000 genes).\n\n    2.  **Apply a strict cutoff:** You apply an arbitrary(‰ªªÊÑèÁöÑ) statistical threshold to create a short list of \"significant\" genes. For example, you select only the genes where the **adjusted p-value \\< 0.05 AND the \\|log2 Fold Change\\| \\> 1**. This might give you a list of 500 \"interesting\" genes.\n\n    3.  **Ask the ORA question:** You then use the `hypergeometric test` to ask: \"Is the 'Apoptosis(ÁªÜËÉûÂáã‰∫°)' pathway, which has 100 member genes in the universe, surprisingly over-represented in my short list of 500 genes?\"\n\n-   **The Visual Analogy:** Imagine all your genes are marbles in a giant urn. You pull out a handful of marbles that are \"significant\" (e.g., the red ones). ORA then asks, \"Did I get more 'Apoptosis' marbles in my hand than I would expect by random chance?\"\n\n#### **The Limitations and Problems of the ORA / Cutoff Method**\n\nThis method is simple and useful, but it has two major conceptual flaws:\n\n**1. The Arbitrary Cutoff:**\n\n-   The choice of a p-value cutoff (0.05) or a fold-change cutoff (1.0) is ***completely arbitrary***. ***Is a gene with an adjusted p-value of 0.051 truly biologically meaningless? Is a gene with a log2FC of 0.99 truly uninteresting?***\n\n-   **Information Loss:** By applying this strict cutoff, you are ***throwing away the vast majority of your data***. You are completely ignoring the thousands of genes that showed a weaker but still potentially important change. ***Biology is often about subtle, coordinated shifts, not just blockbuster hits.(ÁîüÁâ©Â≠¶ÈÄöÂ∏∏Ê∂âÂèäÂæÆÂ¶ôÔºåÂçèË∞ÉÁöÑÂèòÂåñÔºåËÄå‰∏çÊòØ‰ªÖ‰ªÖËΩ∞Âä®‰∏ÄÊó∂ÁöÑÂèòÂåñ)***\n\n**2. The Sensitivity Problem:**\n\n-   Imagine a biological pathway‚Äîlike a signaling cascade(‰ø°Âè∑ËÅîÁ∫ß)‚Äîwhere every single one of the 20 genes in the pathway is ***upregulated*** by a small but consistent amount (e.g., a log2FC of 0.5 for all of them).\n\n-   Because none of these genes passes the arbitrary \\|log2FC\\| \\> 1 threshold, **none of them will make it into your \"significant\" list.**\n\n-   As a result, ***the ORA method will be completely blind to this clear and important biological signal***. It will ***report that this pathway is not significant***, which is clearly false. The method is not sensitive to small but coordinated changes.\n\n#### **The GSEA Solution: A Fundamentally Different Question**\n\nGSEA was designed specifically to overcome these two problems. It does away with arbitrary cutoffs and uses your entire dataset.\n\n-   **The GSEA Workflow (Conceptual):**\n\n    1.  **Start with the universe:** You have your list of all 20,000 genes.\n\n    2.  **Rank the ENTIRE list:** Instead of creating a short list, *you rank all 20,000 genes from \"most upregulated\" at the top to \"most downregulated\" at the bottom*. This ranking is typically based on a metric that combines the fold change and the p-value (like the t-statistic).\n\n    3.  **Ask the GSEA question:** Now, for the 'Apoptosis' pathway, GSEA asks a much more elegant question: **\"Are the 100 genes belonging to the 'Apoptosis' pathway randomly distributed throughout my entire ranked list of 20,000 genes, or do they show a tendency to accumulate at the top (upregulated) or the bottom (downregulated)?\"**\n\n-   **The Visual Analogy:** Imagine your 20,000 genes are runners in a marathon, ranked from first to last place. The 'Apoptosis' genes are all wearing blue shirts. GSEA asks: \"Are the blue-shirted runners spread randomly throughout the entire pack of 20,000 runners, or are they suspiciously clustered together near the finish line?\"\n\n#### **Why GSEA is More Powerful**\n\n-   **It is Threshold-Free:** ***It uses all of your data. No information is thrown away.***\n\n-   **It is More Sensitive:** It can detect those subtle but coordinated changes. In our example of the signaling cascade where all 20 genes had a log2FC of 0.5, ORA would miss it completely. GSEA, however, would easily detect that all 20 of these genes are accumulating together near the top of the ranked list and would report the pathway as highly significant.\n\n### **Lesson 1: Summary & Status Check**\n\n-   **Conceptually**, we now understand the critical difference between the two main types of enrichment analysis.\n\n    -   **ORA (Over-Representation Analysis):** Asks if a pathway is over-represented in a short, pre-defined list of significant genes. It is simple but suffers from arbitrary cutoffs and loss of information.\n\n    -   **GSEA (Gene Set Enrichment Analysis):** Asks if a pathway's member genes are non-randomly distributed at the top or bottom of the entire ranked list of all genes. It is threshold-free and more sensitive to subtle, coordinated changes.\n\n------------------------------------------------------------------------\n\n### Lesson 2: The GSEA Algorithm, Step-by-Stepü§©\n\n**Goal:** To understand the three logical stages of the GSEA algorithm: Ranking, Calculating the Enrichment Score, and Assessing Significance.\n\n#### **Step 1: Create a Master Ranked List of All Genes**\n\n**The Concept:** The foundation of GSEA is a single, ranked list that represents your entire experiment. This list must capture both the **magnitude** (how much did it change?) and the **significance** (how confident are we in this change?) for every single gene you measured.\n\n**The Method:**\n\n1.  You start with your differential expression results table (from `DESeq2, limma,` etc.). This table has a log2 Fold Change (logFC) and a p-value for all 20,000 genes.\n\n2.  You cannot simply rank by fold change, because a gene with a huge fold change but a terrible p-value is not reliable. You cannot simply rank by p-value, because a tiny p-value with a near-zero fold change is not biologically interesting.\n\n3.  Therefore, you must combine these into a single **ranking metric**. Common and effective choices include:\n\n    -   The **t-statistic** from the `limma` output.\n\n    -   The stat column from the `DESeq2` output.\n\n    -   A manually calculated metric like: ***`sign(logFC) * -log10(pvalue).`***\n\n4.  You then rank all 20,000 genes in ***descending order based on this metric***. The result is a single list where the gene with the highest positive metric (most strongly upregulated) is at position #1, and the gene with the most negative metric (most strongly downregulated) is at position #20,000.\n\n#### **Step 2: Calculate the Enrichment Score (ES)**\n\n**The Concept:** This is the heart of the algorithm. For a single gene set (e.g., the \"Hallmark Apoptosis\" set, which contains 161 genes), we want to calculate a score that tells us if its members are clustered at the top or bottom of our master ranked list. GSEA does this using an elegant \"random walk\" method.\n\n**The \"Random Walk\" Analogy:**\\\nImagine you are walking from the #1 ranked gene down to the #20,000th gene. You have a pencil and are drawing a graph.\n\n-   You start your pencil at **zero**.\n\n-   Every time you pass a gene that is **IN** your gene set (a \"hit\"), you take a big step **UP**. The size of the step is proportional to the gene's ranking metric (so hits at the very top give bigger steps up).\n\n-   Every time you pass a gene that is **NOT** in your gene set (a \"miss\"), you take a small step **DOWN**.\n\n**The Calculation:**\n\n1.  The algorithm walks down the ranked list from gene 1 to 20,000.\n\n2.  It keeps a running-sum statistic. When it encounters a gene belonging to the \"Apoptosis\" set, it increases the running sum. When it encounters a gene not in the set, it decreases the running sum.\n\n3.  This creates a \"mountain range\" plot. If the apoptosis genes are randomly distributed, the line will just jitter(ÊäñÂä®) randomly around zero.\n\n4.  **However**, if the apoptosis genes are clustered at the top of the list, you will get a series of big steps UP at the beginning, causing the running sum to climb rapidly to a large positive value before it starts to drift back down.\n\n5.  If the apoptosis genes are clustered at the bottom, you will get a series of small steps DOWN for a long time, followed by a series of big steps UP at the very end. This will cause the running sum to drift negatively to a large negative value.\n\n**The Enrichment Score (ES):** The ES is defined as the **maximum deviation of the running sum from zero(ËøêË°åÊÄªÂíå‰∏éÈõ∂ÁöÑÊúÄÂ§ßÂÅèÂ∑Æ)**.\n\n-   A large **positive ES** means the gene set is enriched ***at the top of the list*** (associated with the ***\"upregulated\" phenotype)***.\n\n-   A large **negative ES** means the gene set is enriched ***at the bottom of the list*** (associated with the ***\"downregulated\" phenotype***).\n\n-   An ES close to **zero** means the ***gene set is not enriched*** (its members are ***scattered randomly***).\n\n(This is the classic GSEA plot we will learn to make. ***The green line is the \"random walk\". The peak of that line is the ES***.)\n\n#### **Step 3: Assess the Statistical Significance**\n\n**The Concept:** We have an ES for \"Apoptosis\" (e.g., 0.72). But is that score impressive? Could we have gotten a score that high just by random chance with a random set of 161 genes? We need to calculate a ***p-value.***\n\n**The Method: Permutation Testing(ÊéíÂ∫èÊµãËØï)**\\\nGSEA establishes significance in a very clever and robust way: **it creates its own null distribution by shuffling the data.**\n\n1.  The algorithm takes our master ranked list of 20,000 genes.\n\n2.  It then **randomly shuffles(Êâì‰π±) the gene labels**. Now the ranking metrics are ***associated with the wrong genes***. This creates a \"random\" ranked list.\n\n3.  It ***re-calculates*** the Enrichment Score for \"Apoptosis\" using this shuffled list. It records this new, random ES.\n\n4.  It repeats this shuffling process **thousands of times** (e.g., 10,000 times), generating a null distribution of 10,000 random Enrichment Scores. This distribution shows what a typical ES looks like for the \"Apoptosis\" set when there is no real biological signal.\n\n5.  **The p-value** is then calculated as the fraction of random ES scores from the null distribution that were equal to or more extreme than the actual ES we observed from our real data(ÁÑ∂ÂêéËÆ°ÁÆó p ÂÄºÔºå‰Ωú‰∏∫‰ªéÈõ∂ÂàÜÂ∏É‰∏≠ÈöèÊú∫ ES ÂàÜÊï∞‰∏≠Á≠â‰∫éÊàñÊØîÂÆûÈôÖËßÇÂØüÂà∞ÁöÑÁúüÂÆûÊï∞ÊçÆ ES Êõ¥ÊûÅÁ´ØÁöÑÂàÜÊï∞ÁöÑÊØî‰æã„ÄÇ).\n\n6.  Finally, because we are testing thousands of gene sets at once, it calculates a **False Discovery Rate (FDR)** or adjusted p-value to correct for multiple testing. ***This FDR is the most important value for determining significance.***\n\n**Normalization (NES):** The raw ES is dependent on the size of the gene set. To compare enrichment between a small set and a large set, the score is normalized. This **Normalized Enrichment Score (NES)** is what is typically used for ranking and comparing significant pathways.\n\n### **Lesson 2: Summary & Status Check**\n\n-   **Conceptually**, we have dissected the GSEA algorithm into its three essential parts. We understand that it is a **Rank-then-Walk-then-Shuffle(ÊéíÂ∫è-ÈÅçÂéÜ-ÈáçÊéí)** process.\n\n    1.  **Rank:** Create a master list of all genes based on a robust metric.\n\n    2.  **Walk:** Calculate an **Enrichment Score (ES)** by walking down the list and seeing if a gene set's members accumulate at either end.\n\n    3.  **Shuffle:** Determine the significance of the ES by comparing it to a null distribution created by thousands of **permutations(ÊéíÂàó)** of the gene labels.\n\n------------------------------------------------------------------------\n\n### Lesson 3: The Gene Sets - Your Biological Prior Knowledgeü§ß\n\n**Goal:** To understand the concept of a gene set and to become familiar with the Molecular Signatures Database (`MSigDB`), the gold-standard resource for curated gene sets.\n\n#### **Concept 1: What is a Gene Set?**\n\nA gene set is simply a **list of genes that share a common biological function, location, or regulation.** It represents a ***piece of pre-existing***, curated(Êï¥ÁêÜËøáÁöÑ) biological knowledge. Think of it as a ***pre-defined \"team\" of genes.***\n\n-   **Example 1: A KEGG Pathway Gene Set.** The \"KEGG GLYCOLYSIS\" gene set would be a list of all the genes that encode the enzymes involved in the glycolysis pathway.\n\n-   **Example 2: A GO Term Gene Set.** The \"GO DNA REPAIR\" gene set would be a list of all genes that have been annotated with the \"DNA Repair\" Gene Ontology term.\n\n-   **Example 3: A Regulatory Gene Set.** A gene set could be a list of all genes that have a binding site for a particular transcription factor (like TP53) in their promoter(ÂêØÂä®Â≠ê) region.\n\nGSEA is a general method. The biological meaning of its output is entirely dependent on the quality and nature of the gene sets you use as input.\n\n#### **Concept 2: The Gold Standard - The Molecular Signatures Database (MSigDB)**\n\nManually creating these gene sets would be a monumental(Ëâ∞Â∑®) task. Thankfully, the Broad Institute (the same group that created GSEA) maintains the **Molecular Signatures Database (MSigDB)**. ***This is a massive, meticulously curated collection of thousands of gene sets that is freely available to the scientific community.***\n\nMSigDB is the canonical(ÈÄöÁî®) resource for GSEA. It is organized into several major collections, and knowing the main ones is crucial for any bioinformatician.\n\n#### **The Key MSigDB Collections**\n\nHere are the most important collections you will encounter. Each one is designed to answer a different type of biological question.\n\n-   **H: Hallmark(Ê†áÂøó) Gene Sets (The Best Place to Start)**\n\n    -   **What it is:** This is the smallest and most refined collection, consisting of only **50 gene sets**. Each Hallmark set represents a well-defined, core biological process (e.g., \"HALLMARK_APOPTOSIS\", \"HALLMARK_INFLAMMATORY_RESPONSE\").\n\n    -   **How it was made:** The MSigDB curators used a sophisticated computational approach to distill the thousands of overlapping gene sets from other collections down to their essential, non-redundant core.\n\n    -   **Why you should use it:** It reduces noise and redundancy, making the results much easier to interpret. For most analyses, **starting with the Hallmark collection is the recommended best practice.**\n\n-   **C2: Curated Gene Sets**\n\n    -   **What it is:** This is a massive collection (over 6,000 sets) gathered from various online pathway databases, publications, and knowledge bases.\n\n    -   **Sub-collections:** It is divided into important sub-collections:\n\n        -   **C2:CP:KEGG:** Gene sets from the famous KEGG pathway database.\n\n        -   **C2:CP:Reactome:** Gene sets from the highly detailed Reactome pathway database.\n\n        -   **C2:CP:BioCarta:** Gene sets from the BioCarta pathway database.\n\n    -   **Why you should use it:** When you want to investigate specific, well-known canonical pathways. It's more detailed than the Hallmark collection but also more redundant (e.g., many KEGG pathways will overlap).\n\n-   **C5: GO Gene Sets**\n\n    -   **What it is:** A very large collection (over 10,000 sets) where each gene set corresponds to a Gene Ontology (GO) term.\n\n    -   **Sub-collections:**\n\n        -   **C5:GO:BP:** For Biological Process.\n\n        -   **C5:GO:MF:** For Molecular Function.\n\n        -   **C5:GO:CC:** For Cellular Component.\n\n    -   **Why you should use it:** When you want to explore biological functions in a more granular and comprehensive way than just looking at pathways. The results can be very detailed but also highly redundant.\n\n-   **C3: Regulatory Target Gene Sets**\n\n    -   **What it is:** Gene sets where all the genes are thought to be regulated by a specific transcription factor or microRNA.\n\n    -   **Why you should use it:** When your primary question is about gene regulation. For example, if your experiment involves knocking out a transcription factor, you would use this collection to see if its known target genes are significantly downregulated.\n\n### **Lesson 3: Summary & Status Check**\n\n-   **Conceptually**, we understand that GSEA's power comes from leveraging prior biological knowledge in the form of **curated gene sets**.\n\n-   We have been introduced to the **MSigDB database** as the central, authoritative resource for these gene sets.\n\n-   **Crucially**, we now know the major MSigDB collections and have a strategic plan for using them:\n\n    1.  **Always start with the Hallmark (H) collection** for a high-level, easy-to-interpret view of the results.\n\n    2.  If needed, follow up with more detailed collections like **KEGG/Reactome (C2)** or **Gene Ontology (C5)** to explore more specific hypotheses.\n\nWe have now completed our tour of the core concepts of GSEA. We understand why it's better than ORA, how the algorithm works, and what biological knowledge it uses as input.\n\n------------------------------------------------------------------------\n\n## üò•**Part 2: A Practical GSEA Project in Rüòá**\n\n**Project:** \"**Analyzing the Transcriptional Response to Estrogen(ÈõåÊøÄÁ¥†) Treatment in a Breast Cancer Cell Line (MCF7)**.\"\n\n**Biological Question:** \"Estrogen is a key hormone that drives the growth of certain breast cancers. We want to use GSEA to identify the core biological pathways and hallmark processes that are activated or suppressed in MCF7 cells after estrogen treatment.\"\n\n**Our Starting Point:** We will pretend a colleague has already performed the RNA-seq experiment and the differential expression analysis using DESeq2. They have handed us a single `CSV` file: `estrogen_deg_results.csv.` This file contains the complete results for all \\~20,000 detected genes.\n\n------------------------------------------------------------------------\n\n### **Lesson 4: Project Setup and Data PreparationüôÇ‚Äç‚ÜîÔ∏è**\n\n**Goal:** To set up our R environment, load the differential expression results, and, most importantly, ***create the master ranked list of genes that will be the primary input for our GSEA.***\n\n#### **Chunk 1: Project Setup and Installing Packages**\n\n**Explanation:** First, we'll create an organized project structure. Then, we will install the two key R packages we need for this entire analysis.\n\n-   **`fgsea`:** An R package for running a Fast Preranked(ÊéíÂ∫è) Gene Set Enrichment Analysis. It's extremely fast and widely used in the community.\n\n-   **`msigdbr`:** A brilliant helper package that allows us to download and format gene sets directly from the MSigDB database inside R, saving us from manual downloads.\n\n**Action:**\n\n1.  On your computer, create a new project folder: `Project_GSEA_Estrogen.`\n\n2.  Inside, create the sub-folders: `data`, `scripts`, and `figures`.\n\n3.  In RStudio, create a new R Project in this main folder.\n\n4.  Create a new R script and save it in the scripts folder as `01_gsea_analysis.R.`\n\n5.  In the R console, install the necessary packages:\n\n   \n\n    ```r         \n    install.packages(\"fgsea\")\n    install.packages(\"msigdbr\")\n    install.packages(\"tidyverse\") # For data manipulation and plotting\n    ```\n\n#### **Chunk 2: Loading the Differential Expression Data**\n\n**Explanation:** We need to load our colleague's results file into R. For this lesson, since we don't have a real file, I will provide code that creates a realistic, sample data frame. In a real project, you would simply use `read.csv()` to load your file. We will then inspect the data to understand its structure.\n\n**Action:**\\\nAdd the following code to your `01_gsea_analysis.R` script.\n\n\n```r         \n# --------------------------------------------------------------------------\n# Script: 01_gsea_analysis.R\n# Project: GSEA of Estrogen Response in MCF7 Cells\n# --------------------------------------------------------------------------\n\n# Load the libraries\nlibrary(tidyverse)\nlibrary(fgsea)\nlibrary(msigdbr)\n\n# --- 1. Load and Prepare the Data ---\n\n# In a real project, you would load your data like this:\n# deg_results <- read.csv(\"data/estrogen_deg_results.csv\")\n\n# For this tutorial, we will CREATE a sample data frame that\n# looks just like a real differential expression results file.\nset.seed(42) # for reproducibility\ndeg_results <- data.frame(\n  gene_symbol = paste0(\"GENE\", 1:1000),\n  log2FoldChange = rnorm(1000, 0, 1.5),\n  pvalue = runif(1000, 0, 1),\n  padj = p.adjust(runif(1000, 0, 1), method = \"BH\")\n)\n# Let's make some genes look like they are part of an estrogen response\ndeg_results$log2FoldChange[1:50] <- rnorm(50, 2, 0.5)\ndeg_results$pvalue[1:50] <- runif(50, 0, 0.01)\ndeg_results$padj[1:50] <- p.adjust(deg_results$pvalue[1:50], method = \"BH\")\n\n# Inspect the loaded data\nhead(deg_results)\n```\n\n-   **Run this code.** You now have a data frame called `deg_results`. Look at the first few rows. You'll see it has the essential columns: `a gene identifier (gene_symbol), a log2FoldChange, and adjusted p-values (padj).`\n\n#### **Chunk 3: Creating the Ranked Gene List**\n\n**Explanation:** This is the most critical preparatory step in the entire analysis. As we learned in Lesson 2, GSEA does not take the whole data frame as input. It requires a single, **named, ranked vector**.\n\n-   **The values** in the vector will be our ***ranking metric***.\n\n-   **The names** of the vector elements will be the corresponding gene symbols.\n\nWe will create this ranked list, handle any potential issues like missing values or duplicate gene names, and then sort it in descending order.\n\n**Action:**\\\nAdd this chunk to your script.\n\n\n\n```r         \n# --- 2. Create the Ranked Gene List for GSEA ---\n\n# First, let's create our ranking metric. A good choice is sign(logFC) * -log10(pvalue)\n# This captures both magnitude/direction and significance.\ndeg_results$rank_metric <- sign(deg_results$log2FoldChange) * -log10(deg_results$pvalue)\n\n# Next, we create the named vector.\n# 1. Filter out any genes with NA values in our metric.\n# 2. Handle duplicate gene symbols. Some genes might be measured by multiple probes.\n#    We will keep the one with the highest absolute rank metric.\nranked_genes <- deg_results %>%\n  filter(!is.na(rank_metric)) %>%\n  group_by(gene_symbol) %>%\n  slice_max(order_by = abs(rank_metric), n = 1) %>%\n  ungroup() %>%\n  # Now, pull the metric and gene symbols into the named vector format\n  pull(rank_metric, name = gene_symbol)\n\n# Finally, sort the vector in descending order. This is required by fgsea.\nranked_genes <- sort(ranked_genes, decreasing = TRUE)\n\n# Let's inspect our final ranked list. This is the direct input for GSEA.\ncat(\"--- Our final ranked gene list ---\\n\")\nhead(ranked_genes)\ncat(\"\\n... (and at the other end) ...\\n\")\ntail(ranked_genes)\ncat(\"\\nTotal number of ranked genes:\", length(ranked_genes), \"\\n\")\n```\n\n-   **Run this code.**\n\n-   **Verification:** Inspect the output in your console. You should see a list of numbers (the ranking metric) with gene symbols as their names. The `head()` output will show the genes with the largest positive metric (our most upregulated genes), and the `tail()` output will show the genes with the most negative metric (our most downregulated genes). You have successfully created the exact data structure that `fgsea` needs.\n\n### **Lesson 4: Summary & Status Check**\n\n-   **Conceptually**, we have put our theoretical knowledge into practice. We understand that the goal of this stage is not just to load data, but to distill it into a master ranked list that captures the full result of our differential expression experiment.\n\n-   **Practically**, we have set up our project, installed the necessary tools, loaded our data, and, most importantly, have written the code to convert a standard DEG results table into the specific **named, sorted vector** format required for GSEA.\n\n------------------------------------------------------------------------\n\n### **Lesson 5: Acquiring Gene SetsüôÅ**\n\n**Goal:** To use the `msigdbr` R package to download the Hallmark gene sets for Homo sapiens and format them into the specific list structure that the `fgsea` package requires.\n\n#### **Chunk 1: Understanding the `msigdbr` Package**\n\n**Explanation:** In the past, scientists had to go to the Broad Institute's website, manually download a `.gmt` file, and then write code to parse that file. The `msigdbr` package makes this entire process obsolete and much more reproducible.\n\n-   It provides a single function, `msigdbr()`, that connects directly to the MSigDB database.\n\n-   You can specify the species you want (e.g., \"Homo sapiens\", \"Mus musculus(Â∞èÂÆ∂Èº†)\").\n\n-   You can specify the category you are interested in (e.g., \"H\" for Hallmark, \"C2\" for Curated, \"C5\" for GO).\n\n-   The function returns a tidy data frame, which is much easier to work with than the old `.gmt` files.\n\n#### **Chunk 2: Downloading the Hallmark Gene Sets**\n\n**Explanation:** As we discussed in Lesson 3, the Hallmark collection is the best place to start. It provides a high-level, non-redundant view of the most important biological processes. We will use the `msigdbr` function to fetch this collection for humans.\n\n**Action:**\\\nAdd this chunk to your `01_gsea_analysis.R` script.\n\n\n\n```r         \n# --- 3. Acquire the Gene Sets from MSigDB ---\n\n# We will use the msigdbr package to get the Hallmark gene sets for humans.\n# msigdbr(species = \"Homo sapiens\", category = \"H\")\n\n# Let's pull the data and inspect it\nhallmark_sets_df <- msigdbr(species = \"Homo sapiens\", category = \"H\")\n\n# Inspect the resulting data frame\nhead(hallmark_sets_df)\n```\n\n-   **Run this code.**\n\n-   **Verification:** Look at the `hallmark_sets_df data` frame. You will see it has a very simple and useful structure. ***Each row represents one gene belonging to one gene set. The key columns are:***\n\n    -   `gs_name`: The name of the gene set (e.g., \"HALLMARK_APOPTOSIS\").\n\n    -   `gene_symbol`: The gene that is a member of that set.\\\n        This tidy format is a great starting point.\n\n#### **Chunk 3: Formatting the Gene Sets for `fgsea`**\n\n**Explanation:** The `fgsea` package is very efficient, and to achieve this speed, it requires the gene sets to be in a specific format: a **named list**.\n\n-   Each **element** **of the list should be a gene set.**\n\n-   The **name** ***of each list element should be the name of the gene set (e.g., \"HALLMARK_APOPTOSIS\").***\n\n-   The **content** ***of each list element should be a simple character vector of all the gene symbols belonging to that set.***\n\nWe need to convert the data frame we just downloaded from `msigdbr` into this list format. While this can be done in several ways in R, using the `split()` and `lapply()` functions or a loop, the `tidyverse` approach with `split()` is often very concise.\n\n**Action:**\\\nAdd this final chunk for the lesson to your script.\n\n\n\n```r         \n# The fgsea function requires the gene sets to be in a named list format.\n# We will convert the data frame from msigdbr into this format.\n\n# The 'split()' function is perfect for this. It splits the 'gene_symbol' column\n# into a list, based on the values in the 'gs_name' column.\nhallmark_sets_list <- split(x = hallmark_sets_df$gene_symbol, f = hallmark_sets_df$gs_name)\n\n# Let's inspect our final gene set list to verify the format.\ncat(\"--- Our final gene set list for fgsea ---\\n\")\n# Look at the first two pathways in the list\nstr(head(hallmark_sets_list, 2))\n```\n\n-   **Run this code.**\n\n-   **Verification:** The `str()` command is our proof. The output in the console will show the structure of our new object, `hallmark_sets_list`. You should see that it is a \"List of 50\" (because there are 50 Hallmark sets). When you expand the first element, you will see something like:\n\n    ```         \n    $ HALLMARK_ADIPOGENESIS: chr [1:200] \"ACSL1\" \"SCD\" \"FASN\" ...\n    ```\n\n    This confirms we have the exact format required: a named list where each element is a vector of gene symbols.\n\n### **Lesson 5: Summary & Status Check**\n\n-   **Conceptually**, we understand that we need a source of high-quality, curated gene sets to power our GSEA, and that MSigDB is the standard for this.\n\n-   **Practically**, we have used the modern and reproducible `msigdbr` package to programmatically fetch the Hallmark gene sets directly into R. We have also successfully transformed this data into the specific **named list format** required by our analysis tool, `fgsea`.\n\nWe have now prepared both of our key inputs:\n\n1.  `ranked_genes`: Our data-driven ranked list from the experiment.\n\n2.  `hallmark_sets_list`: Our knowledge-driven list of biological pathways.\n\nThe stage is perfectly set. We are ready to bring these two inputs together and run the GSEA.\n\n------------------------------------------------------------------------\n\n### **Lesson 6: Running the GSEA and Interpreting the Results Tableü§©**\n\n**Goal:** To use the `fgsea` package to run the Gene Set Enrichment Analysis, to understand the structure of the results table it produces, and to identify the statistically significant pathways.\n\n#### **Chunk 1: Running the `fgsea` Function**\n\n**Explanation:** The `fgsea` package is beautifully designed. The main function, `fgsea()`, is simple to use because we've already done the hard work of formatting our inputs correctly. It takes our list of pathways (`hallmark_sets_list`), our ranked gene list (`ranked_genes`), and a few other parameters. ***One key parameter is `nPermSimple` (previously `nperm`), which tells the function how many permutations(ÊéíÂ∫è) to run to build the null distribution for calculating the p-values. A value of 10,000 is a robust choice for a final analysis.***\n\n**Action:**\\\nAdd this chunk to your `01_gsea_analysis.R` script.\n\n\n\n```r         \n# --- 4. Run the Gene Set Enrichment Analysis ---\n\n# Set a seed for reproducibility of the random permutations\nset.seed(42)\n\n# Run the fgsea algorithm!\nfgsea_results <- fgsea(\n  pathways = hallmark_sets_list,\n  stats = ranked_genes,\n  nPermSimple = 10000 # Number of permutations\n)\n\n# Let's inspect the results table\nhead(fgsea_results)\n```\n\n-   **Run this code.** The `fgsea` function is highly optimized and should complete the 10,000 permutations very quickly. The result, `fgsea_results`, is a data frame (technically a \"data.table\") containing the GSEA results for every one of the 50 Hallmark pathways.\n\n#### **Chunk 2: Understanding the GSEA Results Table**\n\n**Explanation:** The `fgsea_results` table is the core output of our analysis. To use it, we must understand what each column means. Let's go through the most important ones.\n\n-   `pathway`: The name of the gene set from MSigDB (e.g., \"HALLMARK_APOPTOSIS\").\n\n-   `pval`: The raw statistical p-value calculated from the permutation test. It tells you the probability of getting an Enrichment Score (ES) as extreme as the one observed, just by random chance.\n\n-   `padj`: The **adjusted p-value** (or FDR, or q-value). This is the p-value after correcting for the fact that we tested 50 different pathways at once (the multiple testing problem). **This is the most important column for determining statistical significance.** ***A common cutoff is `padj < 0.05` or `padj < 0.1`***.\n\n-   `ES`: The **Enrichment Score**. This is the peak of the \"random walk\" we discussed in Lesson 2. ***It reflects the degree to which a gene set is over-represented at the extremes of the ranked list.***\n\n-   `NES`: The **Normalized Enrichment Score**. This is the most important score for interpretation.\n\n    -   The ES is normalized to account for the size of the gene set, allowing you to compare the results for a small gene set versus a large gene set.\n\n    -   The **sign of the NES** is critical:\n\n        -   **Positive NES:** The pathway is enriched at the **top** of your ranked list. In our case, this means it's associated with genes that were **upregulated** by estrogen.\n\n        -   **Negative NES:** The pathway is enriched at the **bottom** of your ranked list, meaning it's associated with genes that were **downregulated** by estrogen.\n\n-   `size`: The number of genes in the pathway after filtering to only the genes present in our dataset.\n\n-   `leadingEdge`: ***A list of the core member genes of the pathway that contributed most to the ES***. We will look at this more in the next lesson.\n\n#### **Chunk 3: Filtering and Ordering the Results**\n\n**Explanation:** The results table is often long and not sorted in the most useful way. Our first analytical task is to ***filter this table to find the significant pathways and then order them to see the most important biological findings***. We will filter by the adjusted `p-value (padj)` and then sort by the `NES` to ***see the top upregulated and downregulated pathways.***\n\n**Action:**\\\nAdd this chunk to your script.\n\n\n\n```r         \n# --- 5. Interpret the Results ---\n\n# First, let's filter for the significantly enriched pathways\nsignificant_pathways <- fgsea_results %>%\n  filter(padj < 0.05) %>%\n  arrange(desc(NES)) # Sort by NES to see top positive and negative pathways\n\n# Print the significant results\ncat(\"--- Significant Enriched Pathways (padj < 0.05) ---\\n\")\nprint(significant_pathways[, .(pathway, NES, padj, size)]) # Show key columns\n\n# Let's separate the top upregulated and downregulated pathways for clarity\ntop_positive_pathways <- significant_pathways %>%\n  filter(NES > 0) %>%\n  head(10)\n\ntop_negative_pathways <- significant_pathways %>%\n  filter(NES < 0) %>%\n  head(10)\n\n# You can also create a nice summary plot of the top pathways\nplot_data <- bind_rows(top_positive_pathways, top_negative_pathways)\n\nsummary_plot <- ggplot(plot_data, aes(x = NES, y = reorder(pathway, NES))) +\n  geom_col(aes(fill = NES > 0)) +\n  scale_fill_manual(values = c(\"TRUE\" = \"#d95f02\", \"FALSE\" = \"#1b9e77\"), guide = \"none\") +\n  labs(\n    title = \"Top Enriched Hallmark Pathways in Estrogen Response\",\n    x = \"Normalized Enrichment Score (NES)\",\n    y = \"Hallmark Pathway\"\n  ) +\n  theme_minimal()\n\nprint(summary_plot)\nggsave(\"figures/01_gsea_summary_plot.png\", summary_plot, width = 10, height = 8)\n```\n\n-   **Run this code.**\n\n-   **Verification:**\n\n    1.  The printed table in your console is your first key result. It gives you a clean, easy-to-read list of the pathways that were significantly affected by the treatment. This is a core component of your final report.\n\n    2.  The bar chart (`summary_plot`) is your visual proof and a powerful summary figure. It immediately communicates the main findings. The orange bars(Êù°Ê°Ü) are the key processes activated by estrogen, and the green bars are the processes that were suppressed.\n\n### **Lesson 6: Summary & Status Check**\n\n-   **Conceptually**, we now understand the meaning of the key outputs of a GSEA: the padj for significance, and the NES for the magnitude and direction of the enrichment.\n\n-   **Practically**, we have successfully run the fgsea function on our data and have written the code to filter, sort, and display the results in both a tabular and a graphical format.\n\n-   **Crucially**, we have followed the \"Trust, but Verify\" principle by inspecting the results table and creating a summary plot that confirms our findings and is suitable for a presentation or publication.\n\n------------------------------------------------------------------------\n\n### **Lesson 7: Visualizing the Resultsüç¨**\n\n**Goal:** To understand how to read the classic GSEA enrichment plot and to use `fgsea` to generate these plots for our top significant pathways.\n\n#### **Chunk 1: Deconstructing the GSEA Enrichment Plot**\n\n**Explanation:** The GSEA enrichment plot is one of the most iconic and information-rich visualizations in bioinformatics. It can look intimidating at first, but it's actually a brilliant summary of the entire GSEA algorithm for a single gene set. Let's break it down into its three main components, from top to bottom.\n\n1.  **The Top Panel (The \"Mountain\"): The Enrichment Score (ES) Plot.**\n\n    -   This is the \"random walk\" we discussed in Lesson 2.\n\n    -   The **y-axis** is the running-sum Enrichment Score(Á¥ØËÆ°‰∏∞ÂØåÂàÜÊï∞).\n\n    -   The **x-axis** represents the position in your master ranked list of all genes (from most upregulated on the left to most downregulated on the right).\n\n    -   The peak (or valley) of this green line is the final ES for the pathway. A peak on the left means the pathway is enriched in upregulated genes. A valley on the right means it's enriched in downregulated genes.\n\n2.  **The Middle Panel (The \"Barcodes\"): The Hit Ticks.**\n\n    -   This is the simplest but most important part of the plot.\n\n    -   Each vertical black line (a \"tick\") shows the position of a gene that is a **member of this specific gene set** (\"a hit\") within the master ranked list.\n\n    -   This panel allows you to see the distribution of the gene set members at a glance. If you see the barcodes clustering on the left side, it visually confirms that the genes in this set tend to be highly ranked (upregulated).\n\n3.  **The Bottom Panel (The \"Heatmap\"): The Ranking Metric.**\n\n    -   This is a heatmap of the ranking metric for all genes in your master list.\n\n    -   It's typically colored red for the highest positive ranks (upregulated) and blue for the most negative ranks (downregulated).\n\n    -   This provides a global view of the entire experimental trend and serves as a backdrop for the other two panels.\n\n#### **Chunk 2: Plotting the Top Upregulated Pathway**\n\n**Explanation:** The `fgsea` package provides a simple function, `plotEnrichment()`, to generate these beautiful plots. All it needs is the specific pathway name you want to visualize and the ranked stats list we already created. Let's create a plot for our most significantly **upregulated** pathway.\n\n**Action:**\\\nAdd this chunk to your 01_gsea_analysis.R script.\n\n\n\n```r         \n# --- 6. Visualize Specific Pathway Results ---\n\n# Let's find the name of our top positively enriched pathway\ntop_pathway_positive <- significant_pathways %>%\n  filter(NES > 0) %>%\n  slice_max(order_by = NES, n = 1) %>%\n  pull(pathway)\n\ncat(\"Plotting top POSITIVE pathway:\", top_pathway_positive, \"\\n\")\n\n# Create the enrichment plot\npositive_plot <- plotEnrichment(\n  pathway = hallmark_sets_list[[top_pathway_positive]],\n  stats = ranked_genes\n) + \n  labs(title = top_pathway_positive)\n\n# Display and save the plot\nprint(positive_plot)\nggsave(paste0(\"figures/02_enrichment_plot_\", top_pathway_positive, \".png\"), positive_plot, width = 7, height = 5)\n```\n\n-   **Run this code.**\n\n-   **Verification:** A new plot will appear. This is your proof.\n\n    -   Observe the **green line**: It should rise sharply on the left side, indicating a positive Enrichment Score.\n\n    -   Observe the **barcodes**: You should see a high density of black tick marks clustered on the far left, visually confirming that the member genes of this pathway are highly concentrated among the most upregulated genes in your experiment.\n\n#### **Chunk 3: Plotting the Top Downregulated Pathway**\n\n**Explanation:** Now we will do the exact same thing for our most significantly **downregulated** pathway. This demonstrates the symmetry of the analysis.\n\n**Action:**\\\nAdd this final chunk to your script.\n\n\n\n```r         \n# Now let's plot the top NEGATIVELY enriched pathway\ntop_pathway_negative <- significant_pathways %>%\n  filter(NES < 0) %>%\n  slice_min(order_by = NES, n = 1) %>%\n  pull(pathway)\n\ncat(\"Plotting top NEGATIVE pathway:\", top_pathway_negative, \"\\n\")\n\n# Create the enrichment plot\nnegative_plot <- plotEnrichment(\n  pathway = hallmark_sets_list[[top_pathway_negative]],\n  stats = ranked_genes\n) + \n  labs(title = top_pathway_negative)\n\n# Display and save the plot\nprint(negative_plot)\nggsave(paste0(\"figures/03_enrichment_plot_\", top_pathway_negative, \".png\"), negative_plot, width = 7, height = 5)\n```\n\n-   **Run this code.**\n\n-   **Verification:** A second enrichment plot will appear.\n\n    -   Observe the **green line**: It should drift downwards for a long time and form a deep valley on the right side, indicating a negative Enrichment Score.\n\n    -   Observe the **barcodes**: You will now see the black tick marks clustered on the **far right**, visually confirming that the members of this pathway are highly concentrated among the most downregulated genes in your experiment.\n\n### **Grand Conclusion of the GSEA Project**\n\nWe have successfully completed a full, professional GSEA workflow from start to finish. Let's recap the story we've built.\n\n1.  **The Concept:** We started by understanding that GSEA is a powerful, threshold-free method that asks if a gene set's members accumulate at the top or bottom of a ranked list of all our genes.\n\n2.  **Data Prep:** We loaded our differential expression results and meticulously converted them into the required master **ranked gene list**.\n\n3.  **Gene Sets:** We programmatically fetched the high-quality **Hallmark gene sets** from the MSigDB database.\n\n4.  **Running GSEA:** We ran the `fgsea` algorithm to calculate the NES and FDR for all 50 Hallmark pathways.\n\n5.  **Interpreting Results:** We created a **summary bar plot** showing the top up- and down-regulated pathways, giving us the high-level biological story.\n\n6.  **Detailed Visualization:** We generated classic **GSEA enrichment plots** for our top hits, providing the detailed, verifiable evidence of why those pathways were significant.\n\n**The Final Result:**\\\nYou now have a set of high-quality, publication-ready figures and a statistically robust table that tells a compelling story about your experiment. You can confidently say, for example:\n\n\"Our Gene Set Enrichment Analysis reveals that estrogen treatment in MCF7 cells leads to a significant activation of the 'HALLMARK_MYC_TARGETS_V1' and 'HALLMARK_E2F_TARGETS' pathways, consistent with increased cell proliferation. Conversely, we observed a significant suppression of the 'HALLMARK_TNFA_SIGNALING_VIA_NFKB' pathway...\"\n\n### `Then you could to leverage the power of the GSEA¬†method¬†you have already learned and apply it strategically to different¬†collections of gene sets¬†to go from a high-level summary (Hallmark) to a detailed, mechanistic understanding (KEGG, GO). You don't need to learn a new method; you just need to swap out the biological knowledge base you are testing against.`"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":true,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"produce-source-notebook":true,"notebook-preserve-cells":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"GSNA.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.24","manuscript":{"article":"index.qmd","notebooks":[{"notebook":"docking.qmd"},{"notebook":"GSNA.qmd"},{"notebook":"metabolim.qmd"},{"notebook":"micro.qmd"},{"notebook":"networkpharma.qmd"},{"notebook":"proteomic.qmd"}],"mecaFile":"index-meca.zip"},"quarto-internal":{"subarticles":[{"input":"D:\\nootbookpo\\docking.qmd","token":"nb-1","render":true},{"input":"D:\\nootbookpo\\GSNA.qmd","token":"nb-2","render":true},{"input":"D:\\nootbookpo\\metabolim.qmd","token":"nb-3","render":true},{"input":"D:\\nootbookpo\\micro.qmd","token":"nb-4","render":true},{"input":"D:\\nootbookpo\\networkpharma.qmd","token":"nb-5","render":true},{"input":"D:\\nootbookpo\\proteomic.qmd","token":"nb-6","render":true}]},"notebook-preview-options":{"back":true},"theme":"cosmo","title-block-style":"manuscript","lightbox":"auto","comments":{"hypothesis":true},"title":"GSNA ÊïôÁ®ã","authors":[{"name":"JAYZ","affiliation":"The University OF Myself","roles":"writing","corresponding":true}],"bibliography":["references.bib"],"clear-hidden-classes":"none","remove-hidden":"all","unroll-markdown-cells":true},"extensions":{"book":{"multiFile":true}}},"docx":{"identifier":{"display-name":"MS Word","target-format":"docx","base-format":"docx"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":true,"prefer-html":false,"output-divs":true,"output-ext":"docx","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"page-width":6.5,"produce-source-notebook":true,"notebook-preserve-cells":true},"pandoc":{"default-image-extension":"png","to":"docx","output-file":"GSNA.docx"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"manuscript":{"article":"index.qmd","notebooks":[{"notebook":"docking.qmd"},{"notebook":"GSNA.qmd"},{"notebook":"metabolim.qmd"},{"notebook":"micro.qmd"},{"notebook":"networkpharma.qmd"},{"notebook":"proteomic.qmd"}],"mecaFile":"index-meca.zip"},"quarto-internal":{"subarticles":[{"input":"D:\\nootbookpo\\docking.qmd","token":"nb-1","render":true},{"input":"D:\\nootbookpo\\GSNA.qmd","token":"nb-2","render":true},{"input":"D:\\nootbookpo\\metabolim.qmd","token":"nb-3","render":true},{"input":"D:\\nootbookpo\\micro.qmd","token":"nb-4","render":true},{"input":"D:\\nootbookpo\\networkpharma.qmd","token":"nb-5","render":true},{"input":"D:\\nootbookpo\\proteomic.qmd","token":"nb-6","render":true}]},"notebook-preview-options":{"back":true},"theme":"cosmo","title-block-style":"manuscript","lightbox":"auto","title":"GSNA ÊïôÁ®ã","authors":[{"name":"JAYZ","affiliation":"The University OF Myself","roles":"writing","corresponding":true}],"bibliography":["references.bib"],"clear-hidden-classes":"none","remove-hidden":"all","unroll-markdown-cells":true},"extensions":{"book":{"selfContainedOutput":true}}},"jats":{"identifier":{"display-name":"JATS","target-format":"jats","base-format":"jats"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":true,"prefer-html":false,"output-divs":true,"output-ext":"xml","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"variant":"+element_citations","produce-source-notebook":true,"notebook-preserve-cells":true},"pandoc":{"standalone":true,"default-image-extension":"png","to":"jats","output-file":"GSNA.xml"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"manuscript":{"article":"index.qmd","notebooks":[{"notebook":"docking.qmd"},{"notebook":"GSNA.qmd"},{"notebook":"metabolim.qmd"},{"notebook":"micro.qmd"},{"notebook":"networkpharma.qmd"},{"notebook":"proteomic.qmd"}],"mecaFile":"index-meca.zip"},"quarto-internal":{"subarticles":[{"input":"D:\\nootbookpo\\docking.qmd","token":"nb-1","render":true},{"input":"D:\\nootbookpo\\GSNA.qmd","token":"nb-2","render":true},{"input":"D:\\nootbookpo\\metabolim.qmd","token":"nb-3","render":true},{"input":"D:\\nootbookpo\\micro.qmd","token":"nb-4","render":true},{"input":"D:\\nootbookpo\\networkpharma.qmd","token":"nb-5","render":true},{"input":"D:\\nootbookpo\\proteomic.qmd","token":"nb-6","render":true}]},"notebook-preview-options":{"back":true},"theme":"cosmo","title-block-style":"manuscript","lightbox":"auto","title":"GSNA ÊïôÁ®ã","authors":[{"name":"JAYZ","affiliation":"The University OF Myself","roles":"writing","corresponding":true}],"bibliography":["references.bib"],"clear-hidden-classes":"none","remove-hidden":"all","unroll-markdown-cells":true}}},"projectFormats":["html","docx","jats"]}